find.package("devtools")
install.packages("devtools")
find.package("devtools")
library(devtools)
find_rtools()
install.packages()
install.packages("KernSmooth")
library(KernSmooth)
install.packages ("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl(())
swirl()
5 + 7
x <- 5+7
x
y <- x-3
y
z <- typec(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
c()
c
?c
z
c(z,555,z)
z *2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0,10,100)
z *2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- ""
old.dir <- getwd()
testdir <- dir.create()
dir.create(testdir)
?dir.create
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file,path("folder1","folder2")
?file.path
file.path("folder1","folder2")
?dir.create
getwd()
dir.create(file.path('testdir2', testdir3), recursive = TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd('old.dir')
?setwd
setwd(old.dir)
1:20
pi:10
15:1
?now
?:
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5, 10, length=30)
length("my_seq")
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2,), each = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse=" ")
c(my_char, "Ajay")
my_name = c(my_char, "Ajay")
my_name
paste(my_char, collapse=" ")
paste(my_name, collapse=" ")
paste("Hello", "world", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"), sep= "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
print (my_data)
my_data
0/0
inf - inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[3,5,7]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar =2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar,"norf)
names(vect2) <- c("foo", "bar,"norf"")
names(vect2) <- c("foo", "bar,"norf")
names(vect2) <- c("foo", "bar","norf")
indentical(vect1, vect2)
identical(vect1, vect2)
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina",)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FALSE && FALSE
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
idnetical ('twins', 'twins')
identical ('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(c(ints > 7))
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My First Function!')
boring_function('My first function!')
boring_function
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder (divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
evaluate(func = sd(), dat = c(1.4,3.6,7.9,8.8))
evaluate(sd(), x <- c(1.4,3.6,7.9,8.8))
evaluate(x <- sd(), y <- c(1.4,3.6,7.9,8.8))
submit()
submit()
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[len(x)]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("programming","is","fun")
paste("programming","is","fun!")
paste("Programming","is","fun!")
submit()
paste("Ajay is Awesome")
telegram("Ajay is Awesome")
submit()
mad_libs(place <- "chennai", adjective <- "watha", noun <- "super" )
submit()
submit()
submit()
submit()
submit()
submit()
"i" %p% "love" %p% "R!"
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M" )
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
source('~/.active-rstudio-document')
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
z <- 10
f(3)
source('~/.active-rstudio-document')
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x <- 5
y <- 7
!(!(x < 4) & !!!(y > 12))
setwd("C:/Users/ajays/Desktop/Springboard/Linear_reg")
list.files("dataSets")
states.data <- readRDS("dataSets/states.rds")
states.info <- data.frame(attributes(states.data)[c("names", "var.labels")])
tail(states.info, 8)
str(states.info)
str(states.data)
class(states.data)
library(dplyr)
dataset <- select(states.data, energy, metro)
dataset
summary(dataset)
dataset_final <- !is.na(dataset)
summary(dataset_final)
rm (dataset)
rm (dataset1)
rm (dataset_final)
dataset <- select(states.data, energy, metro, na.rm = TRUE)
dataset1 <- select(states.data, energy, metro)
dataset <- filter(!is.na(dataset1))
dataset <- dataset1 %>% na.omit()
summary(dataset)
summary(dataset1)
plot(dataset)
library(ggplot2)
ggplot(dataset, aes(x = metro, y = energy)) + geom_point()
reg_model_1 <- lm(energy~metro, data = dataset)
summary(reg_model_1)
dataset1 <- select(states.data, energy, metro, income, toxic, house, senate)
dataset <- dataset1 %>% na.omit()
summary(dataset)
cor(dataset)
reg_model_2 <- lm(energy~metro + income + toxic, data = dataset)
summary(reg_model_2)
reg_model_ineraction <- lm(energy~metro*toxic, data = states.data)
coef(summary(reg_model_ineraction))
reg_model_ineraction_1 <- lm(energy~metro*toxic*income, data = states.data)
coef(summary(reg_model_ineraction_1))
dataset1 <- select(states.data, energy, metro, toxic, income, factor(region))
str(states.data)
dataset1 <- select(states.data, energy, metro, toxic, income,region)
dataset <- dataset1 %>%  na.omit()
dataset$region <- factor(dataset$region)
reg_model_region <- lm(energy ~ metro + income + toxic + region, data = dataset)
coef(summary(reg_model_region))
contratsdataset$region)
contrats(dataset$region)
contrasts(dataset$region)
